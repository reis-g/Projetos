import json
import os
import tkinter as tk
from tkinter import simpledialog, messagebox
from datetime import datetime

# Função para carregar dados de um arquivo JSON
def carregar_dados(arquivo):
    if os.path.exists(arquivo):
        with open(arquivo, 'r') as f:
            return json.load(f)
    return {}

# Função para salvar dados em um arquivo JSON
def salvar_dados(arquivo, dados):
    with open(arquivo, 'w') as f:
        json.dump(dados, f, indent=4)

# Função para formatar o CPF com pontos e traço
def formatar_cpf(cpf):
    return f'{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}'

# Função para autenticar usuário
def autenticar_usuario():
    while True:
        cpf = simpledialog.askstring("Login", "Digite seu CPF (somente números):")
        if cpf and len(cpf) == 11 and cpf.isdigit():
            cpf_formatado = formatar_cpf(cpf)
            senha = simpledialog.askstring("Login", f"CPF: {cpf_formatado}\nDigite sua senha:", show='*')

            # Verifica nos arquivos de cada tipo de usuário
            for tipo in ['professores', 'pais', 'direcoes']:
                usuarios = carregar_dados(f'{tipo}.json')
                if cpf in usuarios and usuarios[cpf]['senha'] == senha:
                    messagebox.showinfo("Login", f"Bem-vindo, {usuarios[cpf]['nome']}!")
                    return tipo, usuarios[cpf]
            
            messagebox.showerror("Erro", "CPF ou senha incorretos.")
            return None, None
        else:
            retry = messagebox.askretrycancel("Erro", "CPF inválido. Digite 11 números.")
            if not retry:
                return None, None

# Classe base de Usuário
class Usuario:
    def __init__(self, cpf, nome, senha):
        self.cpf = cpf
        self.nome = nome
        self.senha = senha

# Classe Professor
class Professor(Usuario):
    def __init__(self, cpf, nome, senha, turma):
        super().__init__(cpf, nome, senha)
        self.turma = turma

    def preencher_registro(self):
        for aluno in self.turma['alunos']:
            registro = RegistroDiario(aluno)
            registro.preencher()
            aluno['registros'].append(registro.to_dict())
        salvar_dados('turmas.json', {self.turma['nome']: self.turma})
        messagebox.showinfo("Sucesso", "Registros diários preenchidos com sucesso!")

# Classe Pais
class Pais(Usuario):
    def __init__(self, cpf, nome, senha, alunos):
        super().__init__(cpf, nome, senha)
        self.alunos = alunos

    def ver_mensagens(self):
        for aluno in self.alunos:
            for registro in aluno['registros']:
                data = registro['data']
                mensagem = registro['mensagem']
                if mensagem:
                    messagebox.showinfo(f"Mensagem para {aluno['nome']}", f"Data: {data}\nMensagem: {mensagem}")

# Classe Direcao
class Direcao(Usuario):
    def __init__(self, cpf, nome, senha):
        super().__init__(cpf, nome, senha)

    def enviar_mensagem(self):
        turmas = carregar_dados('turmas.json')
        for turma_nome, turma in turmas.items():
            for aluno in turma['alunos']:
                mensagem = simpledialog.askstring("Mensagem", f"Digite uma mensagem para {aluno['nome']}:")
                if mensagem:
                    registro = RegistroDiario(aluno, mensagem=mensagem)
                    aluno['registros'].append(registro.to_dict())
        salvar_dados('turmas.json', turmas)
        messagebox.showinfo("Sucesso", "Mensagens enviadas para todos os alunos!")

    def cadastrar_usuario(self):
        tipo_usuario = simpledialog.askstring("Cadastro", "Digite o tipo de usuário (professor, pais, direcao):").lower()
        cpf = simpledialog.askstring("Cadastro", "Digite o CPF do usuário (somente números):")
        if not cpf or len(cpf) != 11 or not cpf.isdigit():
            messagebox.showerror("Erro", "CPF inválido! Deve conter 11 números.")
            return

        cpf_formatado = formatar_cpf(cpf)
        nome = simpledialog.askstring("Cadastro", f"Digite o nome do usuário (CPF: {cpf_formatado}):")
        senha = simpledialog.askstring("Cadastro", "Digite a senha do usuário:", show='*')

        if tipo_usuario == 'professor':
            turma_nome = simpledialog.askstring("Cadastro", "Digite o nome da turma:")
            turmas = carregar_dados('turmas.json')
            if turma_nome not in turmas:
                turmas[turma_nome] = {'nome': turma_nome, 'alunos': []}
                salvar_dados('turmas.json', turmas)
            turma = turmas[turma_nome]
            dados = {'cpf': cpf, 'nome': nome, 'senha': senha, 'turma': turma}
        elif tipo_usuario == 'pais':
            alunos = []
            while True:
                aluno_nome = simpledialog.askstring("Cadastro", "Digite o nome do filho (ou deixe em branco para terminar):")
                if not aluno_nome:
                    break
                alunos.append({'nome': aluno_nome, 'registros': []})
            dados = {'cpf': cpf, 'nome': nome, 'senha': senha, 'alunos': alunos}
        elif tipo_usuario == 'direcao':
            dados = {'cpf': cpf, 'nome': nome, 'senha': senha}
        else:
            messagebox.showerror("Erro", "Tipo de usuário inválido!")
            return

        usuarios = carregar_dados(f'{tipo_usuario}s.json')
        usuarios[cpf] = dados
        salvar_dados(f'{tipo_usuario}s.json', usuarios)
        messagebox.showinfo("Sucesso", f"Usuário {nome} (CPF: {cpf_formatado}) cadastrado com sucesso!")

    def alterar_usuario(self):
        cpf = simpledialog.askstring("Alterar Usuário", "Digite o CPF do usuário a ser alterado (somente números):")
        if not cpf or len(cpf) != 11 ou not cpf.isdigit():
            messagebox.showerror("Erro", "CPF inválido! Deve conter 11 números.")
            return

        cpf_formatado = formatar_cpf(cpf)
        for tipo in ['professores', 'pais', 'direcoes']:
            usuarios = carregar_dados(f'{tipo}.json')
            if cpf in usuarios:
                usuario = usuarios[cpf]
                novo_nome = simpledialog.askstring("Alterar", f"Nome atual: {usuario['nome']}. Digite o novo nome (ou deixe em branco para manter):")
                nova_senha = simpledialog.askstring("Alterar", "Digite a nova senha (ou deixe em branco para manter):", show='*')
                
                if novo_nome:
                    usuario['nome'] = novo_nome
                if nova_senha:
                    usuario['senha'] = nova_senha
                
                usuarios[cpf] = usuario
                salvar_dados(f'{tipo}.json', usuarios)
                messagebox.showinfo("Sucesso", f"Usuário alterado com sucesso! (CPF: {cpf_formatado})")
                return

        messagebox.showerror("Erro", "Usuário não encontrado!")

# Classe RegistroDiario
class RegistroDiario:
    def __init__(self, aluno, brincou=False, fez_xixi=False, fez_coco=False, comeu_lanche=False, comeu_almoco=False, comeu_janta=False, mensagem=""):
        self.data = datetime.now().strftime('%Y-%m-%d')
        self.aluno = aluno
        self.brincou = brincou
        self.fez_xixi = fez_xixi
        self.fez_coco = fez_coco
        self.comeu_lanche = comeu_lanche
        self.comeu_almoco = comeu_almoco
        self.comeu_janta = comeu_janta
        self.mensagem = mensagem

    def preencher(self):
        self.brincou = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} brincou?")
        self.fez_xixi = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} fez xixi?")
        self.fez_coco = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} fez cocô?")
        self.comeu_lanche = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} comeu no lanche?")
        self.comeu_almoco = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} comeu no almoço?")
        self.comeu_janta = messagebox.askyesno("Registro Diário", f"{self.aluno['nome']} comeu na janta?")
        self.mensagem = simpledialog.askstring("Mensagem", f"Digite uma mensagem sobre {self.aluno['nome']}:")

    def to_dict(self):
        return {
            'data': self.data,
            'brincou': self.brincou,
            'fez_xixi': self.fez_xixi,
            'fez_coco': self.fez_coco,
            'comeu_lanche': self.comeu_lanche,
            'comeu_almoco': self.comeu_almoco,
            'comeu_janta': self.comeu_janta,
            'mensagem': self.mensagem
        }

# Função principal
def menu_principal():
    root = tk.Tk()
    root.withdraw()

    # Criando usuários para teste
    if not os.path.exists('professores.json'):
        turma1 = {
            'nome': 'Turma A',
            'alunos': [
                {'nome': 'João', 'registros': []},
                {'nome': 'Maria', 'registros': []}
            ]
        }
        salvar_dados('turmas.json', {'Turma A': turma1})
        salvar_dados('professores.json', {'11111111111': {'cpf': '11111111111', 'nome': 'Prof. Carlos', 'senha': '1234', 'turma': turma1}})
        salvar_dados('pais.json', {'22222222222': {'cpf': '22222222222', 'nome': 'Sr. Silva', 'senha': '1234', 'alunos': turma1['alunos']}})
        salvar_dados('direcoes.json', {'33333333333': {'cpf': '33333333333', 'nome': 'Diretor João', 'senha': '1234'}})

    while True:
        tipo_usuario, usuario_data = autenticar_usuario()
        if tipo_usuario is None:
            break

        if tipo_usuario == 'professores':
            professor = Professor(usuario_data['cpf'], usuario_data['nome'], usuario_data['senha'], usuario_data['turma'])
            professor.preencher_registro()
        elif tipo_usuario == 'pais':
            pais = Pais(usuario_data['cpf'], usuario_data['nome'], usuario_data['senha'], usuario_data['alunos'])
            pais.ver_mensagens()
        elif tipo_usuario == 'direcoes':
            direcao = Direcao(usuario_data['cpf'], usuario_data['nome'], usuario_data['senha'])
            while True:
                escolha = simpledialog.askstring("Menu Direção", "Escolha uma opção:\n1. Enviar Mensagem\n2. Cadastrar Usuário\n3. Alterar Usuário\n4. Sair")
                if escolha == "1":
                    direcao.enviar_mensagem()
                elif escolha == "2":
                    direcao.cadastrar_usuario()
                elif escolha == "3":
                    direcao.alterar_usuario()
                elif escolha == "4":
                    break
                else:
                    messagebox.showerror("Erro", "Opção inválida!")

if _name_ == "__main__":
    menu_principal()
